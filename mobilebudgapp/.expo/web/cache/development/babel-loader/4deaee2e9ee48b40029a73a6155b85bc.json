{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\torre\\\\Documents\\\\bootcamp\\\\mobilebudgapp\\\\mobilebudgapp\\\\Screens\\\\budgetScreen.js\";\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Container, Header, Content, Card, CardItem, Text, Body, Button } from \"native-base\";\nimport { AppLoading } from 'expo';\nimport MainPage from \"../Components/mainPage\";\nimport AppHeader from \"../Components/appfooter\";\nimport LoadFonts from \"../assets/fonts\";\nimport AppFooter from \"../Components/appfooter\";\nimport ApiMethods from \"../utilities/apiMethods\";\n\nvar BudgetScreen = function (_Component) {\n  _inherits(BudgetScreen, _Component);\n\n  function BudgetScreen() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BudgetScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BudgetScreen)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      fontsLoaded: false,\n      currentPlannedExpensesFromDB: [],\n      currentUnPlannedExpensesFromDB: [],\n      currentIncomeFromDB: [],\n      currentMonth: \"\",\n      currentMonthID: \"\",\n      monthData: [],\n      showComponent: false,\n      doesCurrentMonthNeedData: false\n    };\n\n    _this.fetchData = function (userID, currentMonthID) {\n      _this.getPlannedExpenseDataFromDB(userID, currentMonthID);\n\n      _this.getUnPlannedExpenseDataFromDB(userID, currentMonthID);\n\n      _this.getIncomeDataFromDB(userID, currentMonthID);\n\n      _this.getMonthDataFromDB();\n\n      _this.setState({\n        showComponent: true\n      });\n    };\n\n    _this.getPlannedExpenseDataFromDB = function (userID, currentMonthID) {\n      ApiMethods.getAllPlannedExpenses(userID, currentMonthID).then(function (expenses) {\n        _this.setState({\n          currentPlannedExpensesFromDB: expenses.data\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this.getUnPlannedExpenseDataFromDB = function (userID, currentMonthID) {\n      ApiMethods.getAllUnPlannedExpenses(userID, currentMonthID).then(function (expenses) {\n        _this.setState({\n          currentUnPlannedExpensesFromDB: expenses.data\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this.getIncomeDataFromDB = function (userID, currentMonthID) {\n      ApiMethods.getIncomeByUserID(userID, currentMonthID).then(function (income) {\n        _this.setState({\n          currentIncomeFromDB: income.data\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this.getMonthDataFromDB = function () {\n      return ApiMethods.getMonthData().then(function (monthDataArrayFromDB) {\n        _this.setState({\n          monthData: monthDataArrayFromDB.data\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this.selectNewMonth = function _callee(month, monthID) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(ApiMethods.getAllUnPlannedExpenses(_this.props.route.params.userID, monthID).then(function (expenses) {\n                if (expenses.data.length === 0) {\n                  _this.setState({\n                    doesCurrentMonthNeedData: true\n                  });\n                }\n              }).catch(function (err) {\n                return console.log(err);\n              }));\n\n            case 2:\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(ApiMethods.getAllPlannedExpenses(_this.props.route.params.userID, monthID).then(function (expenses) {\n                if (expenses.data.length === 0) {\n                  _this.setState({\n                    doesCurrentMonthNeedData: true\n                  });\n                }\n              }).catch(function (err) {\n                return console.log(err);\n              }));\n\n            case 4:\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(ApiMethods.getIncomeByUserID(_this.props.route.params.userID, monthID).then(function (income) {\n                if (income.data.length === 0) {\n                  _this.props.navigation.navigate('Create New Budget', {\n                    previousMonthName: _this.props.route.params.currentMonth,\n                    previousMonthID: _this.props.route.params.currentMonthID,\n                    userID: _this.props.route.params.userID,\n                    targetMonthID: monthID,\n                    targetMonthName: month,\n                    fetchData: _this.fetchData\n                  });\n\n                  _this.setState({\n                    currentMonth: month,\n                    currentMonthID: monthID,\n                    doesCurrentMonthNeedData: true\n                  }, function () {\n                    _this.fetchData(_this.props.route.params.userID, monthID);\n                  });\n                } else {\n                  _this.setState({\n                    currentMonth: month,\n                    currentMonthID: monthID,\n                    doesCurrentMonthNeedData: false\n                  }, function () {\n                    _this.fetchData(_this.props.route.params.userID, monthID);\n                  });\n                }\n              }).catch(function (err) {\n                return console.log(err);\n              }));\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(BudgetScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.fetchData(this.props.route.params.userID, this.props.route.params.currentMonthID);\n      this.setState({\n        currentMonth: this.props.route.params.currentMonth,\n        currentMonthID: this.props.route.params.currentMonthID\n      });\n      LoadFonts().then(function (fonts) {\n        _this2.setState({\n          fontsLoaded: true\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var navigation = this.props.navigation;\n\n      if (!this.state.fontsLoaded) {\n        return React.createElement(AppLoading, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115\n          }\n        });\n      } else {\n        return React.createElement(Container, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          }\n        }, this.state.showComponent ? React.createElement(View, {\n          style: {\n            position: 'relative',\n            zIndex: 0,\n            height: '92%'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          }\n        }, React.createElement(MainPage, {\n          loggedInUsersEmail: this.props.route.params.email,\n          currentUserID: this.props.route.params.userID,\n          currentMonth: this.state.currentMonth,\n          currentYear: this.props.route.params.currentYear,\n          currentMonthID: this.state.currentMonthID,\n          currentPlannedExpensesFromDB: this.state.currentPlannedExpensesFromDB,\n          currentUnPlannedExpensesFromDB: this.state.currentUnPlannedExpensesFromDB,\n          getUnPlannedExpenseDataFromDB: this.getUnPlannedExpenseDataFromDB,\n          currentIncomeFromDB: this.state.currentIncomeFromDB,\n          monthData: this.state.monthData,\n          fetchData: this.fetchData,\n          navigation: navigation,\n          photoURL: this.props.route.params.photoURL,\n          signOut: this.props.route.params.signOut,\n          selectNewMonth: this.selectNewMonth,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          }\n        })) : React.createElement(Text, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          }\n        }, \"Loading\"), React.createElement(AppFooter, {\n          navigation: this.props.navigation,\n          loggedInUsersEmail: this.props.route.params.email,\n          currentUserID: this.props.route.params.userID,\n          currentMonth: this.state.currentMonth,\n          currentYear: this.props.route.params.currentYear,\n          currentMonthID: this.state.currentMonthID,\n          getUnPlannedExpenseDataFromDB: this.getUnPlannedExpenseDataFromDB,\n          getIncomeDataFromDB: this.getIncomeDataFromDB,\n          screen: \"budget\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152\n          }\n        }));\n      }\n    }\n  }]);\n\n  return BudgetScreen;\n}(Component);\n\nexport default BudgetScreen;","map":{"version":3,"sources":["C:/Users/torre/Documents/bootcamp/mobilebudgapp/mobilebudgapp/Screens/budgetScreen.js"],"names":["React","Component","Container","Header","Content","Card","CardItem","Text","Body","Button","AppLoading","MainPage","AppHeader","LoadFonts","AppFooter","ApiMethods","BudgetScreen","state","fontsLoaded","currentPlannedExpensesFromDB","currentUnPlannedExpensesFromDB","currentIncomeFromDB","currentMonth","currentMonthID","monthData","showComponent","doesCurrentMonthNeedData","fetchData","userID","getPlannedExpenseDataFromDB","getUnPlannedExpenseDataFromDB","getIncomeDataFromDB","getMonthDataFromDB","setState","getAllPlannedExpenses","then","expenses","data","catch","err","console","log","getAllUnPlannedExpenses","getIncomeByUserID","income","getMonthData","monthDataArrayFromDB","selectNewMonth","month","monthID","props","route","params","length","navigation","navigate","previousMonthName","previousMonthID","targetMonthID","targetMonthName","fonts","position","zIndex","height","email","currentYear","photoURL","signOut"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,OAA5B,EAAqCC,IAArC,EAA2CC,QAA3C,EAAqDC,IAArD,EAA2DC,IAA3D,EAAiEC,MAAjE,QAA+E,aAA/E;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,OAAOC,QAAP;AACA,OAAOC,SAAP;AACA,OAAOC,SAAP;AACA,OAAOC,SAAP;AACA,OAAOC,UAAP;;IAEMC,Y;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNC,MAAAA,WAAW,EAAE,KADP;AAENC,MAAAA,4BAA4B,EAAE,EAFxB;AAGNC,MAAAA,8BAA8B,EAAE,EAH1B;AAINC,MAAAA,mBAAmB,EAAE,EAJf;AAKNC,MAAAA,YAAY,EAAE,EALR;AAMNC,MAAAA,cAAc,EAAE,EANV;AAONC,MAAAA,SAAS,EAAE,EAPL;AAQNC,MAAAA,aAAa,EAAE,KART;AASNC,MAAAA,wBAAwB,EAAE;AATpB,K;;UAkBRC,S,GAAY,UAACC,MAAD,EAASL,cAAT,EAA4B;AACtC,YAAKM,2BAAL,CAAiCD,MAAjC,EAAyCL,cAAzC;;AACA,YAAKO,6BAAL,CAAmCF,MAAnC,EAA2CL,cAA3C;;AACA,YAAKQ,mBAAL,CAAyBH,MAAzB,EAAiCL,cAAjC;;AACA,YAAKS,kBAAL;;AACA,YAAKC,QAAL,CAAc;AAACR,QAAAA,aAAa,EAAE;AAAhB,OAAd;AACD,K;;UAEDI,2B,GAA8B,UAACD,MAAD,EAASL,cAAT,EAA4B;AACxDR,MAAAA,UAAU,CAACmB,qBAAX,CAAiCN,MAAjC,EAAyCL,cAAzC,EACCY,IADD,CACM,UAAAC,QAAQ,EAAI;AAChB,cAAKH,QAAL,CAAc;AACZd,UAAAA,4BAA4B,EAAEiB,QAAQ,CAACC;AAD3B,SAAd;AAGD,OALD,EAMCC,KAND,CAMO,UAAAC,GAAG;AAAA,eAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,OANV;AAOD,K;;UAEDT,6B,GAAgC,UAACF,MAAD,EAASL,cAAT,EAA4B;AAC1DR,MAAAA,UAAU,CAAC2B,uBAAX,CAAmCd,MAAnC,EAA2CL,cAA3C,EACGY,IADH,CACQ,UAAAC,QAAQ,EAAI;AACV,cAAKH,QAAL,CAAc;AACZb,UAAAA,8BAA8B,EAAEgB,QAAQ,CAACC;AAD7B,SAAd;AAGD,OALT,EAMSC,KANT,CAMe,UAAAC,GAAG;AAAA,eAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,OANlB;AAOD,K;;UAEDR,mB,GAAsB,UAACH,MAAD,EAASL,cAAT,EAA4B;AAChDR,MAAAA,UAAU,CACD4B,iBADT,CAC2Bf,MAD3B,EACmCL,cADnC,EAESY,IAFT,CAEc,UAAAS,MAAM,EAAI;AACZ,cAAKX,QAAL,CAAc;AACZZ,UAAAA,mBAAmB,EAAEuB,MAAM,CAACP;AADhB,SAAd;AAGD,OANX,EAOSC,KAPT,CAOe,UAAAC,GAAG;AAAA,eAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,OAPlB;AAQD,K;;UAEDP,kB,GAAqB,YAAM;AACzB,aAAOjB,UAAU,CAAC8B,YAAX,GACNV,IADM,CACD,UAAAW,oBAAoB,EAAI;AAC5B,cAAKb,QAAL,CAAc;AACZT,UAAAA,SAAS,EAAEsB,oBAAoB,CAACT;AADpB,SAAd;AAGD,OALM,EAMNC,KANM,CAMA,UAAAC,GAAG;AAAA,eAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,OANH,CAAP;AAOD,K;;UAGDQ,c,GAAiB,iBAAOC,KAAP,EAAcC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAELlC,UAAU,CAAC2B,uBAAX,CAAmC,MAAKQ,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBxB,MAA3D,EAAmEqB,OAAnE,EACGd,IADH,CACQ,UAAAC,QAAQ,EAAI;AAChB,oBAAIA,QAAQ,CAACC,IAAT,CAAcgB,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,wBAAKpB,QAAL,CAAc;AAACP,oBAAAA,wBAAwB,EAAE;AAA3B,mBAAd;AACD;AACF,eALH,EAMGY,KANH,CAMS,UAAAC,GAAG;AAAA,uBAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,eANZ,CAFK;;AAAA;AAAA;AAAA,+CAUJxB,UAAU,CAACmB,qBAAX,CAAiC,MAAKgB,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBxB,MAAzD,EAAiEqB,OAAjE,EACEd,IADF,CACO,UAAAC,QAAQ,EAAI;AAChB,oBAAIA,QAAQ,CAACC,IAAT,CAAcgB,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,wBAAKpB,QAAL,CAAc;AAACP,oBAAAA,wBAAwB,EAAE;AAA3B,mBAAd;AACD;AACF,eALF,EAMEY,KANF,CAMQ,UAAAC,GAAG;AAAA,uBAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,eANX,CAVI;;AAAA;AAAA;AAAA,+CAkBJxB,UAAU,CAAC4B,iBAAX,CAA6B,MAAKO,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBxB,MAArD,EAA6DqB,OAA7D,EACId,IADJ,CACS,UAAAS,MAAM,EAAI;AACd,oBAAIA,MAAM,CAACP,IAAP,CAAYgB,MAAZ,KAAuB,CAA3B,EAA8B;AACxB,wBAAKH,KAAL,CAAWI,UAAX,CAAsBC,QAAtB,CAA+B,mBAA/B,EAAoD;AAACC,oBAAAA,iBAAiB,EAAE,MAAKN,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwB9B,YAA5C;AAA0DmC,oBAAAA,eAAe,EAAE,MAAKP,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwB7B,cAAnG;AAAmHK,oBAAAA,MAAM,EAAE,MAAKsB,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBxB,MAAnJ;AAA2J8B,oBAAAA,aAAa,EAAET,OAA1K;AAAmLU,oBAAAA,eAAe,EAAEX,KAApM;AAA2MrB,oBAAAA,SAAS,EAAE,MAAKA;AAA3N,mBAApD;;AACA,wBAAKM,QAAL,CAAc;AAACX,oBAAAA,YAAY,EAAE0B,KAAf;AAAsBzB,oBAAAA,cAAc,EAAE0B,OAAtC;AAA+CvB,oBAAAA,wBAAwB,EAAE;AAAzE,mBAAd,EAA6F,YAAM;AAAC,0BAAKC,SAAL,CAAe,MAAKuB,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBxB,MAAvC,EAA+CqB,OAA/C;AAAwD,mBAA5J;AACL,iBAHD,MAGO;AACD,wBAAKhB,QAAL,CAAc;AAACX,oBAAAA,YAAY,EAAE0B,KAAf;AAAsBzB,oBAAAA,cAAc,EAAE0B,OAAtC;AAA+CvB,oBAAAA,wBAAwB,EAAE;AAAzE,mBAAd,EAA8F,YAAM;AAAC,0BAAKC,SAAL,CAAe,MAAKuB,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBxB,MAAvC,EAA+CqB,OAA/C;AAAwD,mBAA7J;AACL;AACF,eARJ,EASIX,KATJ,CASU,UAAAC,GAAG;AAAA,uBAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,eATb,CAlBI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;;;;;;wCAxDG;AAAA;;AAClB,WAAKZ,SAAL,CAAe,KAAKuB,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBxB,MAAvC,EAA+C,KAAKsB,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwB7B,cAAvE;AACA,WAAKU,QAAL,CAAc;AAACX,QAAAA,YAAY,EAAE,KAAK4B,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwB9B,YAAvC;AAAqDC,QAAAA,cAAc,EAAE,KAAK2B,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwB7B;AAA7F,OAAd;AACAV,MAAAA,SAAS,GAAGsB,IAAZ,CAAiB,UAAAyB,KAAK,EAAI;AAAC,QAAA,MAAI,CAAC3B,QAAL,CAAc;AAACf,UAAAA,WAAW,EAAE;AAAd,SAAd;AAAmC,OAA9D,EAAgEoB,KAAhE,CAAsE,UAAAC,GAAG;AAAA,eAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,OAAzE;AACD;;;6BAkFS;AAAA,UACGe,UADH,GACiB,KAAKJ,KADtB,CACGI,UADH;;AAGR,UAAI,CAAC,KAAKrC,KAAL,CAAWC,WAAhB,EAA6B;AAC1B,eAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACF,OAFD,MAEO;AACH,eACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA,WACG,KAAKD,KAAL,CAAWQ,aAAX,GAED,oBAAC,IAAD;AAAM,UAAA,KAAK,EAAE;AAAEoC,YAAAA,QAAQ,EAAE,UAAZ;AAAwBC,YAAAA,MAAM,EAAE,CAAhC;AAAmCC,YAAAA,MAAM,EAAE;AAA3C,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA,WACA,oBAAC,QAAD;AACE,UAAA,kBAAkB,EAAE,KAAKb,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBY,KAD9C;AAEE,UAAA,aAAa,EAAE,KAAKd,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBxB,MAFzC;AAGE,UAAA,YAAY,EAAE,KAAKX,KAAL,CAAWK,YAH3B;AAIE,UAAA,WAAW,EAAE,KAAK4B,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBa,WAJvC;AAKE,UAAA,cAAc,EAAE,KAAKhD,KAAL,CAAWM,cAL7B;AAME,UAAA,4BAA4B,EAAE,KAAKN,KAAL,CAAWE,4BAN3C;AAOE,UAAA,8BAA8B,EAAE,KAAKF,KAAL,CAAWG,8BAP7C;AAQE,UAAA,6BAA6B,EAAE,KAAKU,6BARtC;AASE,UAAA,mBAAmB,EAAE,KAAKb,KAAL,CAAWI,mBATlC;AAUE,UAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWO,SAVxB;AAWE,UAAA,SAAS,EAAE,KAAKG,SAXlB;AAYE,UAAA,UAAU,EAAE2B,UAZd;AAaE,UAAA,QAAQ,EAAE,KAAKJ,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBc,QAbpC;AAcE,UAAA,OAAO,EAAE,KAAKhB,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBe,OAdnC;AAeE,UAAA,cAAc,EAAE,KAAKpB,cAfvB;AAAA;AAAA;AAAA;AAAA;AAAA,UADA,CAFC,GAsBC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA,qBAvBJ,EAkCI,oBAAC,SAAD;AACA,UAAA,UAAU,EAAE,KAAKG,KAAL,CAAWI,UADvB;AAEA,UAAA,kBAAkB,EAAE,KAAKJ,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBY,KAF5C;AAGA,UAAA,aAAa,EAAE,KAAKd,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBxB,MAHvC;AAIA,UAAA,YAAY,EAAE,KAAKX,KAAL,CAAWK,YAJzB;AAKA,UAAA,WAAW,EAAE,KAAK4B,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBa,WALrC;AAMA,UAAA,cAAc,EAAE,KAAKhD,KAAL,CAAWM,cAN3B;AAOA,UAAA,6BAA6B,EAAE,KAAKO,6BAPpC;AAQA,UAAA,mBAAmB,EAAE,KAAKC,mBAR1B;AASA,UAAA,MAAM,EAAE,QATR;AAAA;AAAA;AAAA;AAAA;AAAA,UAlCJ,CADF;AAgDH;AACF;;;;EA3JwB9B,S;;AA8JzB,eAAee,YAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { View } from 'react-native';\r\nimport { Container, Header, Content, Card, CardItem, Text, Body, Button } from \"native-base\";\r\nimport { AppLoading } from 'expo';\r\nimport MainPage from '../Components/mainPage';\r\nimport AppHeader from '../Components/appfooter';\r\nimport LoadFonts from '../assets/fonts';\r\nimport AppFooter from '../Components/appfooter';\r\nimport ApiMethods from '../utilities/apiMethods';\r\n\r\nclass BudgetScreen extends Component {\r\n\r\n  state = {\r\n    fontsLoaded: false,\r\n    currentPlannedExpensesFromDB: [],\r\n    currentUnPlannedExpensesFromDB: [],\r\n    currentIncomeFromDB: [],\r\n    currentMonth: \"\",\r\n    currentMonthID: \"\",\r\n    monthData: [],\r\n    showComponent: false,\r\n    doesCurrentMonthNeedData: false,\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchData(this.props.route.params.userID, this.props.route.params.currentMonthID);\r\n    this.setState({currentMonth: this.props.route.params.currentMonth, currentMonthID: this.props.route.params.currentMonthID});\r\n    LoadFonts().then(fonts => {this.setState({fontsLoaded: true})}).catch(err => console.log(err));\r\n  }\r\n\r\n  fetchData = (userID, currentMonthID) => {\r\n    this.getPlannedExpenseDataFromDB(userID, currentMonthID);\r\n    this.getUnPlannedExpenseDataFromDB(userID, currentMonthID);\r\n    this.getIncomeDataFromDB(userID, currentMonthID);\r\n    this.getMonthDataFromDB();\r\n    this.setState({showComponent: true});\r\n  }\r\n\r\n  getPlannedExpenseDataFromDB = (userID, currentMonthID) => {\r\n    ApiMethods.getAllPlannedExpenses(userID, currentMonthID)\r\n    .then(expenses => {\r\n      this.setState({\r\n        currentPlannedExpensesFromDB: expenses.data\r\n      })\r\n    })\r\n    .catch(err => console.log(err));\r\n  }\r\n\r\n  getUnPlannedExpenseDataFromDB = (userID, currentMonthID) => {\r\n    ApiMethods.getAllUnPlannedExpenses(userID, currentMonthID)\r\n      .then(expenses => {\r\n              this.setState({\r\n                currentUnPlannedExpensesFromDB: expenses.data\r\n              });\r\n            })\r\n            .catch(err => console.log(err));\r\n  }\r\n\r\n  getIncomeDataFromDB = (userID, currentMonthID) => {\r\n    ApiMethods\r\n            .getIncomeByUserID(userID, currentMonthID)\r\n            .then(income => {\r\n                this.setState({\r\n                  currentIncomeFromDB: income.data\r\n                  })\r\n              })\r\n            .catch(err => console.log(err))\r\n  }\r\n\r\n  getMonthDataFromDB = () => {\r\n    return ApiMethods.getMonthData()\r\n    .then(monthDataArrayFromDB => {\r\n      this.setState({\r\n        monthData: monthDataArrayFromDB.data\r\n      });\r\n    })\r\n    .catch(err => console.log(err));\r\n  }\r\n\r\n\r\n  selectNewMonth = async (month, monthID) => {\r\n    // Check to see if there are any unplanned expenses in this month\r\n        await ApiMethods.getAllUnPlannedExpenses(this.props.route.params.userID, monthID)\r\n                .then(expenses => {\r\n                  if (expenses.data.length === 0) {\r\n                    this.setState({doesCurrentMonthNeedData: true})\r\n                  }\r\n                })\r\n                .catch(err => console.log(err));\r\n    // Check to see if there are any planned expenses in this month\r\n        await  ApiMethods.getAllPlannedExpenses(this.props.route.params.userID, monthID)\r\n                .then(expenses => {\r\n                  if (expenses.data.length === 0) {\r\n                    this.setState({doesCurrentMonthNeedData: true})\r\n                  }\r\n                })\r\n                .catch(err => console.log(err));\r\n    // Check to see if there are is any income in this month\r\n        await  ApiMethods.getIncomeByUserID(this.props.route.params.userID, monthID)\r\n                  .then(income => {\r\n                    if (income.data.length === 0) { // previousMonthID, userID, targetMonthID\r\n                          this.props.navigation.navigate('Create New Budget', {previousMonthName: this.props.route.params.currentMonth, previousMonthID: this.props.route.params.currentMonthID, userID: this.props.route.params.userID, targetMonthID: monthID, targetMonthName: month, fetchData: this.fetchData});\r\n                          this.setState({currentMonth: month, currentMonthID: monthID, doesCurrentMonthNeedData: true},() => {this.fetchData(this.props.route.params.userID, monthID)});                  \r\n                    } else {\r\n                          this.setState({currentMonth: month, currentMonthID: monthID, doesCurrentMonthNeedData: false},() => {this.fetchData(this.props.route.params.userID, monthID)});\r\n                    }\r\n                  })\r\n                  .catch(err => console.log(err));\r\n      }\r\n\r\n    render(){\r\n        const {navigation} = this.props;\r\n    \r\n    if (!this.state.fontsLoaded) {\r\n       return <AppLoading />;\r\n    } else {\r\n        return (\r\n          <Container> \r\n            {this.state.showComponent\r\n              ?\r\n            <View style={{ position: 'relative', zIndex: 0, height: '92%'}}>\r\n            <MainPage \r\n              loggedInUsersEmail={this.props.route.params.email}\r\n              currentUserID={this.props.route.params.userID}\r\n              currentMonth={this.state.currentMonth}\r\n              currentYear={this.props.route.params.currentYear}\r\n              currentMonthID={this.state.currentMonthID}\r\n              currentPlannedExpensesFromDB={this.state.currentPlannedExpensesFromDB}\r\n              currentUnPlannedExpensesFromDB={this.state.currentUnPlannedExpensesFromDB}\r\n              getUnPlannedExpenseDataFromDB={this.getUnPlannedExpenseDataFromDB}\r\n              currentIncomeFromDB={this.state.currentIncomeFromDB}\r\n              monthData={this.state.monthData}\r\n              fetchData={this.fetchData}\r\n              navigation={navigation}\r\n              photoURL={this.props.route.params.photoURL}\r\n              signOut={this.props.route.params.signOut}\r\n              selectNewMonth={this.selectNewMonth}\r\n            />\r\n            </View>\r\n              :\r\n              <Text>Loading</Text>\r\n              }\r\n              {/* <MainPage \r\n              loggedInUsersEmail={\"torre.pk.matthew@gmail.com\"}\r\n              currentMonth={\"May\"}\r\n              currentYear={\"2020\"}\r\n              currentMonthID={\"5eaf6211e7b5c6001726776a\"}\r\n              navigation={navigation}\r\n              photoURL={\"https://lh3.googleusercontent.com/a-/AOh14GiYRuLnlpz-uypUOvbDG_uVR56n6DxLoC5Ubb-Wcg\"}\r\n              // signOut={this.props.route.params.signOut}\r\n              /> */}\r\n              <AppFooter \r\n              navigation={this.props.navigation}\r\n              loggedInUsersEmail={this.props.route.params.email}\r\n              currentUserID={this.props.route.params.userID}\r\n              currentMonth={this.state.currentMonth}\r\n              currentYear={this.props.route.params.currentYear}\r\n              currentMonthID={this.state.currentMonthID}\r\n              getUnPlannedExpenseDataFromDB={this.getUnPlannedExpenseDataFromDB}\r\n              getIncomeDataFromDB={this.getIncomeDataFromDB}\r\n              screen={\"budget\"}\r\n              />\r\n          </Container>\r\n        );\r\n    }\r\n  }\r\n}\r\n\r\n  export default BudgetScreen;"]},"metadata":{},"sourceType":"module"}