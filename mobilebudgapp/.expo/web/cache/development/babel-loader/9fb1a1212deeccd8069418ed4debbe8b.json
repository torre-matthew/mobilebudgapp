{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\torre\\\\Documents\\\\bootcamp\\\\mobilebudgapp\\\\mobilebudgapp\\\\node_modules\\\\react-native-plaid-link-sdk\\\\PlaidLink.js\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nexport var openLink = function openLink(_ref) {\n  var onExit, onSuccess, serializable, constants;\n  return _regeneratorRuntime.async(function openLink$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          onExit = _ref.onExit, onSuccess = _ref.onSuccess, serializable = _objectWithoutProperties(_ref, [\"onExit\", \"onSuccess\"]);\n\n          if (Platform.OS === 'android') {\n            constants = NativeModules.PlaidAndroid.getConstants();\n            NativeModules.PlaidAndroid.startLinkActivityForResult(JSON.stringify(serializable), function (result) {\n              switch (result.resultCode) {\n                case constants.RESULT_SUCCESS:\n                  if (onSuccess != null) {\n                    onSuccess(result.data);\n                  }\n\n                  break;\n\n                case constants.RESULT_CANCELLED:\n                case constants.RESULT_EXIT:\n                  if (onExit != null) {\n                    onExit(result.data);\n                  }\n\n                  break;\n              }\n            });\n          } else {\n            NativeModules.RNLinksdk.create(serializable);\n            NativeModules.RNLinksdk.open(function (error, metadata) {\n              if (error) {\n                if (onExit != null) {\n                  var data = metadata || {};\n                  data.error = error;\n                  onExit(data);\n                }\n              } else {\n                switch (metadata.status) {\n                  case 'connected':\n                    if (onSuccess != null) {\n                      onSuccess(metadata);\n                    }\n\n                    break;\n\n                  default:\n                    if (onExit != null) {\n                      onExit(metadata);\n                    }\n\n                    break;\n                }\n              }\n            });\n          }\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\nexport var dismissLink = function dismissLink() {\n  if (Platform.OS === 'ios') {\n    NativeModules.RNLinksdk.dismiss();\n  }\n};\n\nvar handlePress = function handlePress(linkProps, componentProps) {\n  openLink(linkProps);\n\n  if (componentProps && componentProps.onPress) {\n    componentProps.onPress();\n  }\n};\n\nexport var PlaidLink = function PlaidLink(_ref2) {\n  var component = _ref2.component,\n      componentProps = _ref2.componentProps,\n      children = _ref2.children,\n      linkProps = _objectWithoutProperties(_ref2, [\"component\", \"componentProps\", \"children\"]);\n\n  var Component = component;\n  return React.createElement(Component, _extends({}, componentProps, {\n    onPress: function onPress() {\n      return handlePress(linkProps, componentProps);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    }\n  }), children);\n};\nPlaidLink.propTypes = {\n  clientName: PropTypes.string.isRequired,\n  env: PropTypes.oneOf(['development', 'sandbox', 'production']).isRequired,\n  onSuccess: PropTypes.func.isRequired,\n  product: PropTypes.arrayOf(PropTypes.oneOf(['auth', 'identity', 'income', 'transactions', 'assets', 'liabilities', 'investments'])).isRequired,\n  publicKey: function publicKey(props) {\n    if (!props.publicKey && !props.token) {\n      return new Error(\"One of props 'publicKey' or 'token' is required\");\n    }\n\n    if (typeof props.publicKey !== 'string') {\n      return new Error(\"Invalid prop 'publicKey': Expected string instead of \" + typeof props.publicKey);\n    }\n  },\n  accountSubtypes: PropTypes.shape({\n    credit: PropTypes.arrayOf(PropTypes.string),\n    depository: PropTypes.arrayOf(PropTypes.string),\n    loan: PropTypes.arrayOf(PropTypes.string)\n  }),\n  countryCodes: PropTypes.arrayOf(PropTypes.string),\n  linkCustomizationName: PropTypes.string,\n  language: PropTypes.string,\n  onExit: PropTypes.func,\n  token: PropTypes.string,\n  userEmailAddress: PropTypes.string,\n  userLegalName: PropTypes.string,\n  userPhoneNumber: PropTypes.string,\n  webhook: PropTypes.string,\n  paymentToken: PropTypes.string,\n  oauthNonce: PropTypes.string,\n  oauthRedirectUri: function oauthRedirectUri(props, propName) {\n    var value = props[propName];\n\n    if (value === undefined || value === null) {\n      return;\n    }\n\n    if (typeof value !== 'string') {\n      return new Error('Invalid `' + propName + '`: Expected string instead of ' + typeof value);\n    }\n\n    if (/^https?:\\/\\/(localhost|127.0.0.1)/.test(value)) {\n      return new Error('Invalid `' + propName + '`: localhost disallowed');\n    }\n  },\n  oauthStateId: PropTypes.string,\n  component: PropTypes.func,\n  componentProps: PropTypes.object\n};\nPlaidLink.defaultProps = {\n  component: TouchableOpacity\n};","map":{"version":3,"sources":["C:/Users/torre/Documents/bootcamp/mobilebudgapp/mobilebudgapp/node_modules/react-native-plaid-link-sdk/PlaidLink.js"],"names":["PropTypes","React","openLink","onExit","onSuccess","serializable","Platform","OS","constants","NativeModules","PlaidAndroid","getConstants","startLinkActivityForResult","JSON","stringify","result","resultCode","RESULT_SUCCESS","data","RESULT_CANCELLED","RESULT_EXIT","RNLinksdk","create","open","error","metadata","status","dismissLink","dismiss","handlePress","linkProps","componentProps","onPress","PlaidLink","component","children","Component","propTypes","clientName","string","isRequired","env","oneOf","func","product","arrayOf","publicKey","props","token","Error","accountSubtypes","shape","credit","depository","loan","countryCodes","linkCustomizationName","language","userEmailAddress","userLegalName","userPhoneNumber","webhook","paymentToken","oauthNonce","oauthRedirectUri","propName","value","undefined","test","oauthStateId","object","defaultProps","TouchableOpacity"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { NativeModules, Platform, TouchableOpacity } from 'react-native';\n\nexport const openLink = async ({ onExit, onSuccess, ...serializable }) => {\n  if (Platform.OS === 'android') {\n    const constants = NativeModules.PlaidAndroid.getConstants();\n    NativeModules.PlaidAndroid.startLinkActivityForResult(\n      JSON.stringify(serializable),\n      result => {\n        switch (result.resultCode) {\n          case constants.RESULT_SUCCESS:\n            if (onSuccess != null) {\n              onSuccess(result.data);\n            }\n            break;\n          case constants.RESULT_CANCELLED:\n          case constants.RESULT_EXIT:\n            if (onExit != null) {\n              onExit(result.data);\n            }\n            break;\n        }\n      },\n    );\n  } else {\n    NativeModules.RNLinksdk.create(serializable);\n    NativeModules.RNLinksdk.open((error, metadata) => {\n      if (error) {\n        if (onExit != null) {\n          var data = metadata || {};\n          data.error = error;\n          onExit(data);\n        }\n      } else {\n        switch (metadata.status) {\n          case 'connected':\n            if (onSuccess != null) {\n              onSuccess(metadata);\n            }\n            break;\n          default:\n            if (onExit != null) {\n              onExit(metadata);\n            }\n            break;\n        }\n      }\n    });\n  }\n};\n\nexport const dismissLink = () => {\n  if (Platform.OS === 'ios') {\n    NativeModules.RNLinksdk.dismiss();\n  }\n};\n\nconst handlePress = (linkProps, componentProps) => {\n  openLink(linkProps);\n  if (componentProps && componentProps.onPress) {\n    componentProps.onPress();\n  }\n};\n\nexport const PlaidLink = ({\n  component,\n  componentProps,\n  children,\n  ...linkProps\n}) => {\n  const Component = component;\n  return (\n    <Component\n      {...componentProps}\n      onPress={() => handlePress(linkProps, componentProps)}\n    >\n      {children}\n    </Component>\n  );\n};\n\nPlaidLink.propTypes = {\n  // Required props\n\n  // Displayed once a user has successfully linked their account\n  clientName: PropTypes.string.isRequired,\n\n  // The Plaid API environment on which to create user accounts.\n  env: PropTypes.oneOf(['development', 'sandbox', 'production']).isRequired,\n\n  // A function that is called when a user has successfully onboarded their\n  // account. The function should expect two arguments, the public_key and a\n  // metadata object.\n  onSuccess: PropTypes.func.isRequired,\n\n  // The Plaid product(s) you wish to use, an array containing some of\n  // auth, identity, income, transactions, assets, liabilities, investments.\n  product: PropTypes.arrayOf(\n    PropTypes.oneOf([\n      'auth',\n      'identity',\n      'income',\n      'transactions',\n      'assets',\n      'liabilities',\n      'investments',\n    ]),\n  ).isRequired,\n\n  // Optional props\n\n  // The public_key associated with your account; available from\n  // the Plaid dashboard (https://dashboard.plaid.com).\n  // Either publicKey or token is required.\n  publicKey: props => {\n    if (!props.publicKey && !props.token) {\n      return new Error(`One of props 'publicKey' or 'token' is required`);\n    }\n    if (typeof props.publicKey !== 'string') {\n      return new Error(\n        `Invalid prop 'publicKey': Expected string instead of ${typeof props.publicKey}`,\n      );\n    }\n  },\n\n  // You can configure Link to return only the accounts that\n  // match a given type and subtype\n  //\n  // This object is a nonempty Map<account type, Array<account subtype>>\n  // where account type and account subtype are strings\n  //\n  // see https://plaid.com/docs/#auth-filtering-institutions-in-link\n  // and https://plaid.com/docs/#filtering-institutions-in-link\n  accountSubtypes: PropTypes.shape({\n    credit: PropTypes.arrayOf(PropTypes.string),\n    depository: PropTypes.arrayOf(PropTypes.string),\n    loan: PropTypes.arrayOf(PropTypes.string),\n  }),\n\n  // A list of Plaid-supported country codes using the ISO-3166-1 alpha-2\n  // country code standard.\n  countryCodes: PropTypes.arrayOf(PropTypes.string),\n\n  // Allows non default customization to be retrieved by name.\n  linkCustomizationName: PropTypes.string,\n\n  // Plaid-supported language to localize Link. English will be used by default.\n  language: PropTypes.string,\n\n  // A function that is called when a user has specifically exited Link flow.\n  onExit: PropTypes.func,\n\n  // Specify an existing user's public token to launch Link in update mode.\n  // This will cause Link to open directly to the authentication step for\n  // that user's institution.\n  // Pass an item_add_token to launch Link in regular mode without a public_key.\n  // Either publicKey or token is required.\n  token: PropTypes.string,\n\n  // Specify a user to enable all Auth features. Reach out to your\n  // account manager or integrations@plaid.com to get enabled. See the Auth\n  // [https://plaid.com/docs#auth] docs for integration details.\n  userEmailAddress: PropTypes.string,\n  userLegalName: PropTypes.string,\n  userPhoneNumber: PropTypes.string,\n\n  // Specify a webhook to associate with a user.\n  webhook: PropTypes.string,\n\n  // Specify an existing payment token to launch Link in payment initation mode.\n  // This will cause Link to open a payment confirmation dialog prior to\n  // institution selection.\n  paymentToken: PropTypes.string,\n\n  // An oauthNonce is required to support OAuth authentication flows when\n  // launching Link on iOS and using one or more European country codes.\n  oauthNonce: PropTypes.string,\n\n  // An oauthRedirectUri is required to support OAuth authentication flows when\n  // launching or re-launching Link on iOS and using one or more European\n  // country codes.\n  oauthRedirectUri: function(props, propName) {\n    let value = props[propName];\n    if (value === undefined || value === null) {\n      return;\n    }\n    if (typeof value !== 'string') {\n      return new Error(\n        'Invalid `' +\n          propName +\n          '`: Expected string instead of ' +\n          typeof value,\n      );\n    }\n    if (/^https?:\\/\\/(localhost|127.0.0.1)/.test(value)) {\n      return new Error('Invalid `' + propName + '`: localhost disallowed');\n    }\n  },\n\n  // An oauthStateId is required to support OAuth authentication flows when\n  // re-launching Link on iOS and using one or more European country codes.\n  oauthStateId: PropTypes.string,\n\n  // Underlying component to render\n  component: PropTypes.func,\n\n  // Props for underlying component\n  componentProps: PropTypes.object,\n\n  // Note: onEvent is omitted here, to handle onEvent callbacks refer to\n  // the documentation here: https://github.com/plaid/react-native-plaid-link-sdk#to-receive-onevent-callbacks\n};\n\nPlaidLink.defaultProps = {\n  component: TouchableOpacity,\n};\n"]},"metadata":{},"sourceType":"module"}