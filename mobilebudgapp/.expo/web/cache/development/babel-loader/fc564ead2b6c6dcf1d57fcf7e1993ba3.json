{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\torre\\\\Documents\\\\bootcamp\\\\mobilebudgapp\\\\mobilebudgapp\\\\Components\\\\plaidLinkComponent.js\";\nimport React, { Component } from 'react';\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { Container, Header, Left, Body, Right, Title } from 'native-base';\nimport style from \"../Styles/Styles\";\nimport ApiMethods from \"../utilities/apiMethods\";\nimport PlaidLink from 'react-native-plaid-link-sdk';\n\nvar PlaidLinkComponent = function (_Component) {\n  _inherits(PlaidLinkComponent, _Component);\n\n  function PlaidLinkComponent() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PlaidLinkComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PlaidLinkComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(PlaidLinkComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var emitter = new NativeEventEmitter(Platform.OS === 'ios' ? NativeModules.RNLinksdk : NativeModules.PlaidAndroid);\n      this._listener = emitter.addListener('onEvent', function (e) {\n        return console.log(e);\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._listener) {\n        this._listener.remove();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        }\n      }, React.createElement(PlaidLink, {\n        publicKey: \"ed1160c480b8d7760f30867ac52d83\",\n        clientName: \"Plaid Link for LahriApp\",\n        env: \"sandbox\",\n        product: ['auth', 'transactions'],\n        onSuccess: function onSuccess(public_token) {\n          ApiMethods.getPlaidAccessToken(public_token).then(function (data) {\n            return console.log('success: ', data);\n          }).catch(function (err) {\n            return console.log(err);\n          });\n        },\n        onExit: function onExit(data) {\n          return console.log('exit: ', data);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        }\n      }, React.createElement(Text, {\n        style: {\n          color: '#474198',\n          fontSize: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        }\n      }, \"Add Account via Plaid\")));\n    }\n  }]);\n\n  return PlaidLinkComponent;\n}(Component);\n\nexport default PlaidLinkComponent;","map":{"version":3,"sources":["C:/Users/torre/Documents/bootcamp/mobilebudgapp/mobilebudgapp/Components/plaidLinkComponent.js"],"names":["React","Component","Container","Header","Left","Body","Right","Title","style","ApiMethods","PlaidLink","PlaidLinkComponent","state","emitter","NativeEventEmitter","Platform","OS","NativeModules","RNLinksdk","PlaidAndroid","_listener","addListener","e","console","log","remove","public_token","getPlaidAccessToken","then","data","catch","err","color","fontSize"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;;;AAEA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,IAA5B,EAAkCC,IAAlC,EAAwCC,KAAxC,EAA+CC,KAA/C,QAA2D,aAA3D;AACA,OAAOC,KAAP;AACA,OAAOC,UAAP;AAEA,OAAOC,SAAP,MAAsB,6BAAtB;;IAEMC,kB;;;;;;;;;;;;;;;UAEJC,K,GAAQ,E;;;;;;wCAGY;AAClB,UAAMC,OAAO,GAAG,IAAIC,kBAAJ,CAAuBC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwBC,aAAa,CAACC,SAAtC,GAAkDD,aAAa,CAACE,YAAvF,CAAhB;AACA,WAAKC,SAAL,GAAiBP,OAAO,CAACQ,WAAR,CAAoB,SAApB,EAA+B,UAACC,CAAD;AAAA,eAAOC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAAP;AAAA,OAA/B,CAAjB;AACD;;;2CAEsB;AACrB,UAAI,KAAKF,SAAT,EAAoB;AAClB,aAAKA,SAAL,CAAeK,MAAf;AACD;AACF;;;6BAGQ;AACP,aACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,SAAD;AAIA,QAAA,SAAS,EAAC,gCAJV;AAKA,QAAA,UAAU,EAAC,yBALX;AAMA,QAAA,GAAG,EAAC,SANJ;AAOA,QAAA,OAAO,EAAE,CAAC,MAAD,EAAS,cAAT,CAPT;AAQA,QAAA,SAAS,EAAE,mBAAAC,YAAY,EAAI;AAACjB,UAAAA,UAAU,CAACkB,mBAAX,CAA+BD,YAA/B,EAA6CE,IAA7C,CAAkD,UAAAC,IAAI;AAAA,mBAAIN,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBK,IAAzB,CAAJ;AAAA,WAAtD,EAA0FC,KAA1F,CAAgG,UAAAC,GAAG;AAAA,mBAAIR,OAAO,CAACC,GAAR,CAAYO,GAAZ,CAAJ;AAAA,WAAnG;AAAyH,SARrJ;AASA,QAAA,MAAM,EAAE,gBAAAF,IAAI;AAAA,iBAAIN,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBK,IAAtB,CAAJ;AAAA,SATZ;AAAA;AAAA;AAAA;AAAA;AAAA,SAoBF,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAACG,UAAAA,KAAK,EAAE,SAAR;AAAmBC,UAAAA,QAAQ,EAAE;AAA7B,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA,iCApBE,CADA,CADF;AA4BD;;;;EA9C8BhC,S;;AAgDjC,eAAeU,kBAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { ImageBackground, Image, View, Text, TouchableOpacity, NativeEventEmitter, NativeModules } from 'react-native';\r\nimport { Container, Header, Left, Body, Right, Title} from 'native-base';\r\nimport style from \"../Styles/Styles\";\r\nimport ApiMethods from '../utilities/apiMethods';\r\n/// <reference path='../types/react-native-plaid-link-sdk/index.d.ts' />\r\nimport PlaidLink from 'react-native-plaid-link-sdk';\r\n\r\nclass PlaidLinkComponent extends Component {\r\n\r\n  state = {\r\n  }\r\n\r\n  componentDidMount() {\r\n    const emitter = new NativeEventEmitter(Platform.OS === 'ios' ? NativeModules.RNLinksdk : NativeModules.PlaidAndroid);\r\n    this._listener = emitter.addListener('onEvent', (e) => console.log(e));\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this._listener) {\r\n      this._listener.remove();\r\n    }\r\n  }\r\n\r\n// ApiMethods.getPlaidAccessToken().then(data => console.log('success: ', data)).catch(err => console.log(err))\r\n  render() {\r\n    return (\r\n      <View>\r\n      <PlaidLink\r\n     // Replace any of the following <#VARIABLE#>s according to your setup,\r\n     // for details see https://plaid.com/docs/quickstart/#client-side-link-configuration\r\n \r\n      publicKey='ed1160c480b8d7760f30867ac52d83'\r\n      clientName='Plaid Link for LahriApp'\r\n      env='sandbox'  // 'sandbox' or 'development' or 'production'\r\n      product={['auth', 'transactions']}\r\n      onSuccess={public_token => {ApiMethods.getPlaidAccessToken(public_token).then(data => console.log('success: ', data)).catch(err => console.log(err))}}\r\n      onExit={data => console.log('exit: ', data)}\r\n //\r\n      // Optional props\r\n      // countryCodes={['<# Country Code #>']}\r\n      // accountSubtypes= {{'<#Type#>': ['<# Subtype #>']}}\r\n      // language='<# Language #>'\r\n      // userEmailAddress='<# User Email #>'\r\n      // userLegalName='<# User Legal Name #>'\r\n      // userPhoneNumber='<# User Phone Number #>'\r\n      // webhook='<# Webhook URL #>'\r\n    >\r\n    <Text style={{color: '#474198', fontSize: 20}}>\r\n       Add Account via Plaid\r\n    </Text>  \r\n    </PlaidLink>\r\n    </View>\r\n    );\r\n  }\r\n}\r\nexport default PlaidLinkComponent"]},"metadata":{},"sourceType":"module"}