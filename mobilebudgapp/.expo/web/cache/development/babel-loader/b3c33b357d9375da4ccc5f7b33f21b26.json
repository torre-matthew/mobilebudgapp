{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\torre\\\\Documents\\\\bootcamp\\\\mobilebudgapp\\\\mobilebudgapp\\\\Components\\\\monthPickerModal2.js\";\nimport React, { Component } from 'react';\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport MonthDisplay from \"./monthDisplay\";\nimport style from \"../Styles/Styles\";\nimport { FontAwesome5 } from '@expo/vector-icons';\nimport ApiMethods from \"../utilities/apiMethods\";\n\nvar MonthPickerModal = function (_Component) {\n  _inherits(MonthPickerModal, _Component);\n\n  function MonthPickerModal() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, MonthPickerModal);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(MonthPickerModal)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      modalVisible: false,\n      monthData: []\n    };\n\n    _this.getMonthDataFromDB = function () {\n      return ApiMethods.getMonthData().then(function (monthDataArrayFromDB) {\n        _this.setState({\n          monthData: monthDataArrayFromDB.data\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this.closeModal = function () {\n      _this.setModalVisible(!_this.state.modalVisible);\n    };\n\n    return _this;\n  }\n\n  _createClass(MonthPickerModal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getMonthDataFromDB();\n    }\n  }, {\n    key: \"setModalVisible\",\n    value: function setModalVisible(visible) {\n      this.setState({\n        modalVisible: visible\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: {\n          marginBottom: '8%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        }\n      }, React.createElement(Modal, {\n        animationType: \"slide\",\n        transparent: false,\n        visible: this.state.modalVisible,\n        onRequestClose: this.closeModal,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 18,\n          textAlign: 'center',\n          margin: 20,\n          fontFamily: 'Laila-SemiBold'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        }\n      }, \" Select Month \"), React.createElement(ScrollView, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        }\n      }, this.state.monthData.map(function (monthData) {\n        return React.createElement(MonthDisplay, {\n          month: monthData.month,\n          year: monthData.year,\n          key: monthData._id,\n          monthID: monthData._id,\n          selectMonth: _this2.selectMonth,\n          selectNewMonth: _this2.props.selectNewMonth,\n          closeModal: _this2.closeModal,\n          fetchData: _this2.props.fetchData,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          }\n        });\n      }))), React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          _this2.setModalVisible(true);\n        },\n        style: {\n          flex: 1,\n          flexDirection: 'row'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontSize: 15,\n          fontFamily: 'Laila-SemiBold'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        }\n      }, \" \", this.props.currentMonth, \" \"), React.createElement(Text, {\n        style: {\n          fontSize: 15,\n          fontFamily: 'Laila-SemiBold'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        }\n      }, \" \", this.props.currentYear, \" \"), React.createElement(FontAwesome5, {\n        name: \"caret-down\",\n        size: 20,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        }\n      })));\n    }\n  }]);\n\n  return MonthPickerModal;\n}(Component);\n\nexport default MonthPickerModal;","map":{"version":3,"sources":["C:/Users/torre/Documents/bootcamp/mobilebudgapp/mobilebudgapp/Components/monthPickerModal2.js"],"names":["React","Component","MonthDisplay","style","FontAwesome5","ApiMethods","MonthPickerModal","state","modalVisible","monthData","getMonthDataFromDB","getMonthData","then","monthDataArrayFromDB","setState","data","catch","err","console","log","closeModal","setModalVisible","visible","marginBottom","fontSize","textAlign","margin","fontFamily","map","month","year","_id","selectMonth","props","selectNewMonth","fetchData","flex","flexDirection","currentMonth","currentYear"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {Modal, Text, TouchableHighlight, View, Alert, Dimensions, ScrollView, TouchableOpacity} from 'react-native';\r\n// import { TouchableOpacity } from 'react-native-gesture-handler';\r\nimport MonthDisplay from \"./monthDisplay\";\r\nimport style from \"../Styles/Styles\";\r\nimport { FontAwesome5 } from '@expo/vector-icons';\r\nimport ApiMethods from '../utilities/apiMethods';\r\n\r\nclass MonthPickerModal extends Component {\r\n  state = {\r\n    modalVisible: false,\r\n    monthData: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getMonthDataFromDB();\r\n  }\r\n\r\n  getMonthDataFromDB = () => {\r\n    return ApiMethods.getMonthData()\r\n    .then(monthDataArrayFromDB => {\r\n      this.setState({\r\n        monthData: monthDataArrayFromDB.data\r\n      });\r\n    })\r\n    .catch(err => console.log(err));\r\n  }\r\n\r\n  setModalVisible(visible) {\r\n    this.setState({modalVisible: visible});\r\n  }\r\n\r\n  closeModal = () => {\r\n    this.setModalVisible(!this.state.modalVisible);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <View style={{marginBottom: '8%'}}>\r\n        <Modal\r\n          animationType=\"slide\"\r\n          transparent={false}\r\n          visible={this.state.modalVisible}\r\n          onRequestClose={this.closeModal}>\r\n            <Text style={{fontSize: 18, textAlign: 'center', margin: 20, fontFamily: 'Laila-SemiBold'}}> Select Month </Text>\r\n          <ScrollView>\r\n            {\r\n              this.state.monthData.map(monthData => \r\n              <MonthDisplay \r\n                month={monthData.month} \r\n                year={monthData.year}\r\n                key={monthData._id}\r\n                monthID={monthData._id} \r\n                selectMonth={this.selectMonth}\r\n                selectNewMonth={this.props.selectNewMonth}\r\n                closeModal={this.closeModal}\r\n                fetchData={this.props.fetchData}\r\n                />\r\n              )\r\n            }\r\n          </ScrollView>\r\n        </Modal>\r\n        <TouchableOpacity onPress={() => {this.setModalVisible(true)}} style={{ flex: 1, flexDirection: 'row'}}>        \r\n          <Text style={{fontSize: 15, fontFamily: 'Laila-SemiBold'}}> {this.props.currentMonth} </Text>\r\n          <Text style={{fontSize: 15, fontFamily: 'Laila-SemiBold'}}> {this.props.currentYear} </Text>\r\n          <FontAwesome5 name=\"caret-down\" size={20} />\r\n        </TouchableOpacity>\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MonthPickerModal;"]},"metadata":{},"sourceType":"module"}